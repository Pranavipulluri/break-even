"""
Stability AI Service for Break-even App
Provides AI-powered image generation using Stability AI API
"""

import requests
import base64
import io
from PIL import Image
from flask import current_app
import os
from datetime import datetime
import json

class StabilityService:
    
    def __init__(self, api_key=None):
        self._api_key = api_key or 'sk-Ci8STOuJz4ZE1xGzmQXFDoykscMoNFoD4OCQZr5BlWgd83O2'
        self.base_url = "https://api.stability.ai"
        self.engine_id = "stable-diffusion-v1-6"
    
    @property
    def api_key(self):
        if self._api_key:
            return self._api_key
        try:
            from flask import current_app
            return current_app.config.get('STABILITY_API_KEY', 'sk-Ci8STOuJz4ZE1xGzmQXFDoykscMoNFoD4OCQZr5BlWgd83O2')
        except RuntimeError:
            return 'sk-Ci8STOuJz4ZE1xGzmQXFDoykscMoNFoD4OCQZr5BlWgd83O2'
    
    def test_connection(self):
        """Test connection to Stability AI API"""
        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json",
            }
            
            # Test with engines endpoint
            response = requests.get(
                f"{self.base_url}/v1/engines/list",
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                return {"success": True, "message": "Stability AI connection successful"}
            else:
                return {"success": False, "error": f"API returned status {response.status_code}: {response.text}"}
                
        except Exception as e:
            return {"success": False, "error": f"Connection failed: {str(e)}"}
    
    def generate_image(self, prompt, style="professional", image_type="poster", width=1024, height=1024):
        """Generate image using Stability AI"""
        try:
            # Enhance prompt based on image type and style
            enhanced_prompt = self._enhance_prompt(prompt, style, image_type)
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json",
            }
            
            # Adjust dimensions based on image type
            if image_type == "banner":
                width, height = 1344, 768  # Banner aspect ratio
            elif image_type == "poster":
                width, height = 1024, 1344  # Portrait poster
            elif image_type == "product":
                width, height = 1024, 1024  # Square product image
            
            body = {
                "text_prompts": [
                    {
                        "text": enhanced_prompt,
                        "weight": 1
                    }
                ],
                "cfg_scale": 7,
                "height": height,
                "width": width,
                "samples": 1,
                "steps": 30,
            }
            
            print(f"üé® Generating image with Stability AI...")
            print(f"üìù Enhanced prompt: {enhanced_prompt}")
            print(f"üìê Dimensions: {width}x{height}")
            
            response = requests.post(
                f"{self.base_url}/v1/generation/{self.engine_id}/text-to-image",
                headers=headers,
                json=body,
                timeout=60
            )
            
            if response.status_code != 200:
                error_msg = f"Stability AI API error {response.status_code}: {response.text}"
                print(f"‚ùå {error_msg}")
                return {
                    "success": False,
                    "error": error_msg
                }
            
            response_data = response.json()
            
            if "artifacts" in response_data and len(response_data["artifacts"]) > 0:
                # Get the base64 image data
                image_data = response_data["artifacts"][0]["base64"]
                
                print(f"‚úÖ Image generated successfully!")
                
                return {
                    "success": True,
                    "image_data": f"data:image/png;base64,{image_data}",
                    "prompt": prompt,
                    "enhanced_prompt": enhanced_prompt,
                    "image_type": image_type,
                    "style": style,
                    "dimensions": f"{width}x{height}"
                }
            else:
                return {
                    "success": False,
                    "error": "No image generated by Stability AI"
                }
                
        except requests.exceptions.Timeout:
            return {
                "success": False,
                "error": "Request timed out. Image generation took too long."
            }
        except Exception as e:
            error_msg = f"Image generation failed: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {
                "success": False,
                "error": error_msg
            }
    
    def _enhance_prompt(self, prompt, style, image_type):
        """Enhance the user prompt with style and type-specific details"""
        
        style_prompts = {
            "professional": "professional, clean, corporate, high-quality, polished",
            "modern": "modern, sleek, contemporary, minimalist, trendy",
            "creative": "creative, artistic, unique, innovative, eye-catching",
            "vintage": "vintage, retro, classic, nostalgic, timeless",
            "bold": "bold, striking, dramatic, powerful, attention-grabbing",
            "elegant": "elegant, sophisticated, refined, luxurious, classy"
        }
        
        type_prompts = {
            "poster": "poster design, marketing material, advertisement, promotional",
            "product": "product photography, commercial, clean background, studio lighting",
            "banner": "banner design, web banner, header image, wide format"
        }
        
        # Build enhanced prompt
        enhanced = prompt
        
        # Add type-specific elements
        if image_type in type_prompts:
            enhanced += f", {type_prompts[image_type]}"
        
        # Add style elements
        if style in style_prompts:
            enhanced += f", {style_prompts[style]}"
        
        # Add quality and technical specifications
        enhanced += ", high resolution, detailed, sharp focus, professional photography, 4K quality"
        
        return enhanced
    
    def generate_business_poster(self, business_name, business_type, message, style="professional"):
        """Generate a business poster"""
        prompt = f"Business poster for '{business_name}', a {business_type} business. Main message: '{message}'. Include business name prominently."
        return self.generate_image(prompt, style, "poster")
    
    def generate_product_image(self, product_name, product_description="", style="professional"):
        """Generate a product image"""
        prompt = f"Product image of {product_name}"
        if product_description:
            prompt += f", {product_description}"
        prompt += ". Clean white background, product photography style."
        return self.generate_image(prompt, style, "product")
    
    def generate_marketing_banner(self, business_name, message, style="professional"):
        """Generate a marketing banner"""
        prompt = f"Marketing banner for '{business_name}'. Message: '{message}'. Professional web banner design."
        return self.generate_image(prompt, style, "banner")
